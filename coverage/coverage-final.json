{"/Applications/github/Typescript-Learning/src/engine.ts": {"path":"/Applications/github/Typescript-Learning/src/engine.ts","statementMap":{"0":{"start":{"line":2,"column":14},"end":{"line":13,"column":3}},"1":{"start":{"line":5,"column":4},"end":{"line":11,"column":6}},"2":{"start":{"line":6,"column":21},"end":{"line":6,"column":50}},"3":{"start":{"line":7,"column":27},"end":{"line":7,"column":45}},"4":{"start":{"line":8,"column":8},"end":{"line":10,"column":10}},"5":{"start":{"line":12,"column":4},"end":{"line":12,"column":18}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":14},"end":{"line":2,"column":15}},"loc":{"start":{"line":2,"column":26},"end":{"line":13,"column":1}},"line":2},"1":{"name":"Engine","decl":{"start":{"line":3,"column":13},"end":{"line":3,"column":19}},"loc":{"start":{"line":3,"column":22},"end":{"line":4,"column":5}},"line":3},"2":{"name":"(anonymous_2)","decl":{"start":{"line":5,"column":31},"end":{"line":5,"column":32}},"loc":{"start":{"line":5,"column":51},"end":{"line":11,"column":5}},"line":5}},"branchMap":{},"s":{"0":1,"1":1,"2":3,"3":3,"4":3,"5":1},"f":{"0":1,"1":1,"2":3},"b":{},"inputSourceMap":{"version":3,"file":"engine.js","sourceRoot":"","sources":["engine.ts"],"names":[],"mappings":"AAAA,OAAO,SAAS,MAAM,aAAa,CAAA;AAEnC;IAAA;IAUA,CAAC;IATC,wBAAO,GAAP,UAAQ,QAAgB;QACtB,IAAI,MAAM,GAAG,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAA;QAE1C,IAAI,YAAY,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QAErC,MAAM,CAAC;YACL,MAAM,EAAE,IAAI,QAAQ,CAAC,SAAS,EAAE,2BAAyB,YAAY,OAAI,CAAC;SAC3E,CAAA;IACH,CAAC;IACH,aAAC;AAAD,CAAC,AAVD,IAUC;AAED,eAAe,IAAI,MAAM,EAAE,CAAA","sourcesContent":["import tokenizer from './tokenizer'\n\nclass Engine {\n  compile(template: string): Object {\n    let tokens = tokenizer.getTokens(template)\n\n    let functionBody = tokens.join(' + ')\n\n    return {\n      render: new Function('context', `with(context) {return ${functionBody} }`)\n    }\n  }\n}\n\nexport default new Engine()\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"234e8e0bf301656f7e9039bc581fff47a65ad10b"}
,"/Applications/github/Typescript-Learning/src/token.ts": {"path":"/Applications/github/Typescript-Learning/src/token.ts","statementMap":{"0":{"start":{"line":2,"column":4},"end":{"line":2,"column":35}},"1":{"start":{"line":4,"column":13},"end":{"line":16,"column":3}},"2":{"start":{"line":6,"column":8},"end":{"line":6,"column":27}},"3":{"start":{"line":7,"column":8},"end":{"line":7,"column":25}},"4":{"start":{"line":9,"column":4},"end":{"line":14,"column":6}},"5":{"start":{"line":10,"column":8},"end":{"line":12,"column":9}},"6":{"start":{"line":11,"column":12},"end":{"line":11,"column":51}},"7":{"start":{"line":13,"column":8},"end":{"line":13,"column":38}},"8":{"start":{"line":15,"column":4},"end":{"line":15,"column":17}}},"fnMap":{"0":{"name":"quote","decl":{"start":{"line":1,"column":9},"end":{"line":1,"column":14}},"loc":{"start":{"line":1,"column":20},"end":{"line":3,"column":1}},"line":1},"1":{"name":"(anonymous_1)","decl":{"start":{"line":4,"column":13},"end":{"line":4,"column":14}},"loc":{"start":{"line":4,"column":25},"end":{"line":16,"column":1}},"line":4},"2":{"name":"Token","decl":{"start":{"line":5,"column":13},"end":{"line":5,"column":18}},"loc":{"start":{"line":5,"column":32},"end":{"line":8,"column":5}},"line":5},"3":{"name":"(anonymous_3)","decl":{"start":{"line":9,"column":31},"end":{"line":9,"column":32}},"loc":{"start":{"line":9,"column":43},"end":{"line":14,"column":5}},"line":9}},"branchMap":{"0":{"loc":{"start":{"line":10,"column":8},"end":{"line":12,"column":9}},"type":"if","locations":[{"start":{"line":10,"column":8},"end":{"line":12,"column":9}},{"start":{"line":10,"column":8},"end":{"line":12,"column":9}}],"line":10}},"s":{"0":13,"1":2,"2":24,"3":24,"4":2,"5":23,"6":13,"7":10,"8":2},"f":{"0":13,"1":2,"2":24,"3":23},"b":{"0":[13,10]},"inputSourceMap":{"version":3,"file":"token.js","sourceRoot":"","sources":["token.ts"],"names":[],"mappings":"AAAA,eAAe,GAAW;IACxB,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAA;AAChC,CAAC;AAED;IAIE,eAAY,KAAa,EAAE,IAAY;QACrC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAA;QAClB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;IAClB,CAAC;IAED,wBAAQ,GAAR;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,MAAM,CAAC,CAAC,CAAC;YACzB,MAAM,CAAC,OAAI,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,OAAG,CAAA;QACjC,CAAC;QACD,MAAM,CAAC,MAAI,IAAI,CAAC,KAAK,MAAG,CAAA;IAC1B,CAAC;IACH,YAAC;AAAD,CAAC,AAfD,IAeC;AACD,eAAe,KAAK,CAAA","sourcesContent":["function quote(str: string) {\n  return str.replace(/\\\"/g, '\"')\n}\n\nclass Token {\n  value: string\n  type: string\n\n  constructor(value: string, type: string) {\n    this.value = value\n    this.type = type\n  }\n\n  toString(): string {\n    if (this.type === 'text') {\n      return `\"${quote(this.value)}\"`\n    }\n    return `(${this.value})`\n  }\n}\nexport default Token\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"e2c10c3bcb21f501c2329961701de725206fb6a8"}
,"/Applications/github/Typescript-Learning/src/tokenizer.ts": {"path":"/Applications/github/Typescript-Learning/src/tokenizer.ts","statementMap":{"0":{"start":{"line":2,"column":17},"end":{"line":2,"column":21}},"1":{"start":{"line":3,"column":15},"end":{"line":3,"column":19}},"2":{"start":{"line":4,"column":17},"end":{"line":33,"column":3}},"3":{"start":{"line":7,"column":4},"end":{"line":31,"column":6}},"4":{"start":{"line":8,"column":18},"end":{"line":8,"column":29}},"5":{"start":{"line":9,"column":21},"end":{"line":9,"column":23}},"6":{"start":{"line":10,"column":20},"end":{"line":10,"column":43}},"7":{"start":{"line":11,"column":8},"end":{"line":14,"column":9}},"8":{"start":{"line":12,"column":12},"end":{"line":12,"column":56}},"9":{"start":{"line":13,"column":12},"end":{"line":13,"column":26}},"10":{"start":{"line":15,"column":8},"end":{"line":26,"column":9}},"11":{"start":{"line":16,"column":28},"end":{"line":16,"column":47}},"12":{"start":{"line":17,"column":12},"end":{"line":17,"column":54}},"13":{"start":{"line":18,"column":12},"end":{"line":18,"column":35}},"14":{"start":{"line":19,"column":12},"end":{"line":19,"column":42}},"15":{"start":{"line":20,"column":12},"end":{"line":22,"column":13}},"16":{"start":{"line":21,"column":16},"end":{"line":21,"column":50}},"17":{"start":{"line":23,"column":27},"end":{"line":23,"column":46}},"18":{"start":{"line":24,"column":12},"end":{"line":24,"column":57}},"19":{"start":{"line":25,"column":12},"end":{"line":25,"column":39}},"20":{"start":{"line":27,"column":8},"end":{"line":29,"column":9}},"21":{"start":{"line":28,"column":12},"end":{"line":28,"column":48}},"22":{"start":{"line":30,"column":8},"end":{"line":30,"column":22}},"23":{"start":{"line":32,"column":4},"end":{"line":32,"column":21}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":4,"column":17},"end":{"line":4,"column":18}},"loc":{"start":{"line":4,"column":29},"end":{"line":33,"column":1}},"line":4},"1":{"name":"Tokenizer","decl":{"start":{"line":5,"column":13},"end":{"line":5,"column":22}},"loc":{"start":{"line":5,"column":25},"end":{"line":6,"column":5}},"line":5},"2":{"name":"(anonymous_2)","decl":{"start":{"line":7,"column":36},"end":{"line":7,"column":37}},"loc":{"start":{"line":7,"column":59},"end":{"line":31,"column":5}},"line":7}},"branchMap":{"0":{"loc":{"start":{"line":11,"column":8},"end":{"line":14,"column":9}},"type":"if","locations":[{"start":{"line":11,"column":8},"end":{"line":14,"column":9}},{"start":{"line":11,"column":8},"end":{"line":14,"column":9}}],"line":11},"1":{"loc":{"start":{"line":20,"column":12},"end":{"line":22,"column":13}},"type":"if","locations":[{"start":{"line":20,"column":12},"end":{"line":22,"column":13}},{"start":{"line":20,"column":12},"end":{"line":22,"column":13}}],"line":20},"2":{"loc":{"start":{"line":27,"column":8},"end":{"line":29,"column":9}},"type":"if","locations":[{"start":{"line":27,"column":8},"end":{"line":29,"column":9}},{"start":{"line":27,"column":8},"end":{"line":29,"column":9}}],"line":27}},"s":{"0":2,"1":2,"2":2,"3":2,"4":6,"5":6,"6":6,"7":6,"8":1,"9":1,"10":5,"11":11,"12":11,"13":11,"14":11,"15":11,"16":1,"17":10,"18":10,"19":10,"20":4,"21":2,"22":4,"23":2},"f":{"0":2,"1":2,"2":6},"b":{"0":[1,5],"1":[1,10],"2":[2,2]},"inputSourceMap":{"version":3,"file":"tokenizer.js","sourceRoot":"","sources":["tokenizer.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,SAAS,CAAA;AAE3B,IAAM,UAAU,GAAG,IAAI,CAAA;AACvB,IAAM,QAAQ,GAAG,IAAI,CAAA;AAErB;IAAA;IAmCA,CAAC;IAlCC,6BAAS,GAAT,UAAU,WAAmB;QAC3B,IAAI,GAAG,GAAG,WAAW,CAAA;QAErB,IAAI,MAAM,GAAiB,EAAE,CAAA;QAE7B,IAAI,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC,UAAU,CAAC,CAAA;QAGnC,EAAE,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACjB,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC,CAAA;YAC3C,MAAM,CAAC,MAAM,CAAA;QACf,CAAC;QACD,OAAO,CAAC,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC;YAChD,IAAI,SAAS,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAA;YAEnC,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC,CAAA;YAEzC,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;YACtB,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAA;YAC7B,EAAE,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBACjB,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAA;YACnC,CAAC;YAGD,IAAI,QAAQ,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAA;YAElC,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,CAAA;YAC5C,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,CAAA;QAC5B,CAAC;QACD,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YACnB,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAA;QACrC,CAAC;QACD,MAAM,CAAC,MAAM,CAAA;IACf,CAAC;IACH,gBAAC;AAAD,CAAC,AAnCD,IAmCC;AAED,eAAe,IAAI,SAAS,EAAE,CAAA","sourcesContent":["import Token from './token'\n\nconst startToken = '{{'\nconst endToken = '}}'\n\nclass Tokenizer {\n  getTokens(templateStr: string): Array<Token> {\n    let str = templateStr\n\n    let tokens: Array<Token> = []\n\n    let index = str.indexOf(startToken)\n\n    // 如果没有包含{{说明是普通的text节点\n    if (index === -1) {\n      tokens.push(new Token(templateStr, 'text'))\n      return tokens\n    }\n    while ((index = str.indexOf(startToken)) !== -1) {\n      let textValue = str.slice(0, index)\n\n      tokens.push(new Token(textValue, 'text'))\n\n      str = str.slice(index)\n      index = str.indexOf(endToken)\n      if (index === -1) {\n        throw new Error('template error')\n      }\n\n      // 获取占位符\n      let variable = str.slice(2, index)\n\n      tokens.push(new Token(variable, 'variable'))\n      str = str.slice(index + 2)\n    }\n    if (str.length > 0) {\n      tokens.push(new Token(str, 'text'))\n    }\n    return tokens\n  }\n}\n\nexport default new Tokenizer()\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"08d965f6ac28d6e5887baec5026e39da7c67bb3f"}
}
